site_name: LinxEA-WIKI
site_url: http://linuxea.readthedocs.io
site_description: Project documentation with Markdown.
site_author: MkDocs Team

repo_url: https://github.com/marksugar/iBook
edit_uri: ""
nav:
  - Home: index.md
  - Go笔记:
    - go基础数据类型: GoLang/1.go
    - go循环控制 GoLang/2.go
    - go复合数据类型: GoLang/3.go
    - go数据类型进阶: GoLang/4.go
    - go数据类型进阶: GoLang/4.go
    - go数据类型进阶: GoLang/4.go    
  - 白话容器入门精选:
    - 1.容器基础: Docker/1.Docker-Basis
    - 2.容器基础用法: Docker/2.Docker-Basis-Usege
    - 3.镜像基础: Docker/3.image-Basis-Usege
    - 4.docker网络概述: Docker/4.docker-Network-Summarize   
    - 5.docker容器网络: Docker/5.docker-Network 
    - 6.docker存储卷: Docker/6.docker-Storage-Volume     
    - 7.dockerfile基础1: Docker/7.dockerfile-Basis1   
    - 8.dockerfile基础2: Docker/8.dockerfile-Basis2
    - 9.资源限制: Docker/9.Docker-ResourceLimit
    - 10.Registry仓库: Docker/10.Registry
  - 容器快速入门和技巧:
    - 快速入门:  
      - docker中运行bash或任何命令: Docker/17.in-Docker-Run-bashAndCommand
      - 后台运行容器: Docker/16.Daemon-Run-Docker
      - docker run的十大选项1: Docker/15.dockerrun-TOP10
      - docker run的十大选项2: Docker/21.top10-Docker-CLI-Command   
      - 从命令行删除Docker容器: Docker/19.DockerDeletecontainer
      - 从命令行过滤镜像和卷: Docker/20.DockerCommandFiltering-iMG-Volumes      
      - docker的镜像标签: Docker/26.dockerTag      
      - 简单解释docker的端口命令: Docker/18.Docker-Port-Command
      - Dockerfile中cmd与entrypoin区别: Docker/11.cmd-entrypoint
      - docker run与exec区别: Docker/12.docker-run-exec
      - Dockerfile基础3与ONBUILD: Docker/13.ONBUILD
      - Dockerfile与health-check健康状态检测: Docker/14.docker-health-check
      - Dockerfile COPY与ADD的最佳实践: Docker/45.BestPracticesFor-COPY-And-ADD      
      - 清理docker镜像: Docker/22.CleanUpDockerIMG-containers-Volumes   
      - docker和docker-compose的Entrypoint: Docker/23.useDockerAndCompose-Entrypoint
      - 查看docker日志: Docker/24.EffectiveUseDockerViewLogs
      - 设置docker日志轮训切换: Docker/27.dockerLogRotaionTrainingSwitch    
      - docker-compose入门: Docker/25.runMulti-container-ApplicationDocker-compose
      - docker-compose设置静态ip和link与depends_on的区别: Docker/36.dockerCompose-StaticIp-AND-depends_on-Link                   
    - 容器使用技巧:
      - Nginx镜像优化: Docker/43.container_cpu_detection  
      - 缩减docker镜像大小的几种策略: Docker/38.Several-ways-to-reduce-image    
      - Dockerfile层对镜像大小的影响: Docker/39.dockerfile-Layer-imageSize
      - Dockerfile之--cache-from: Docker/42.--cache-from       
      - Dockerfile之.dockerignore用法: Docker/35.CanNotIgnoreThe.dockerignoreUsage
      - 如何复现docker run参数命令: Docker/28.containerTO-DockerRunCommand
      - 如何从镜像image恢复Dockerfile: Docker/29.dockerImage-TO-Dockerfile
      - Docker none none镜像？: Docker/30.What-Is-Docker-None-None-Image
      - 理解Docker构建缓存: Docker/31.dockerBuildCache
      - 理解Privileged与--cap-add和--cap-drop: Docker/32.Privilege-mode-With--cap-add-AND---cap-drop     
      - 多阶段构建用法和思路: Docker/33.Docker-Multi0Stage-Build    
      - 了解uid和gid如何在docker容器中工作: Docker/34.UID-GID-IN-dockerContainerWayOfWorking
      - docker卷和文件系统权限: Docker/44.dockerVolumeAnd-File-System-Permissions  
      - 容器中的进程不应该以root身份运行: Docker/37.Processes-in-the-container-should-not-be-run-as-root
      - 如何在docker容器内修改系统时间: Docker/40.changeDocker-SystemTime
      - 不要在docker镜像中嵌入配置或者密码: Docker/41.not-In-DockerImage-configurePasswd    
      - gvisor: Docker/46.gvisor 
      - docker安全实践: Docker/47.dockerSecurityPractice
      - harbor配置https: Docker/48.harbor-https   
      - env传参数: Docker/49.env
      - shell env: Docker/50.shell env    
  - Kubernetes:
    #- Kubernetes1.11:
    - 1.kubernetes安装: kubernetes/1.kubernetesInstall
    - 2.run第一个pod: kubernetes/2.runPod
    - 3.资源清单: kubernetes/3.Resourcelist
    - 4.pod控制器1: kubernetes/4.podController1
    - 5.pod控制器2: kubernetes/5.podController2
    - 6.service资源: kubernetes/6.service
    - 7.Ingress Controller: kubernetes/7.Ingress-Controller
    - 8.存储卷: kubernetes/8.Storagevolume  
    - 9.pv-pvc-configmap与secret: kubernetes/9.pv-pvc-configmap and secret    
    - 10.statefulset控制器: kubernetes/10.statefulsetController
    - 11.用户认证: kubernetes/11.UserAuthentication
    - 12.RBAC: kubernetes/12.RBAC    
    - 13.dashboard: kubernetes/13.dashboard
    - 14.网络插件flannel: kubernetes/14.flannel
    - 15.calico: kubernetes/15.calico
    - 16.调度器-预选策略-优选函数: kubernetes/16.Scheduler-PreselectionStrategy-PreferredFunction   
    - 17.高级调度方式: kubernetes/17.Advancedschedulingmethod
    - 18.容器资源需求-限制及heapster: kubernetes/18.ContainerResourceRequirementsHeapster 
    - 19.资源指标API以及自定义指标API: kubernetes/19.ResourceAPI-and-custom-API
    - 20.api server配置文件: kubernetes/20.api serverConfigureFile
    - 21.helm入门: kubernetes/21.helm
    - 22.chart: kubernetes/22.chart
  - Devops:
    - Devops方法:
      - 1.devops起源名字中有什么: Devops/1.devopsNameOrigin-And-meaning
      - 2.面向大众的devops: Devops/2.Devops-for-the-public
      - 3.持续集成首要7个标志: Devops/3.Continuous-integration-of-top7-signs
      - 4.自动化测试和持续测试的差异: Devops/4.Differences-between-automated-testing-and-continuous-testing
      - 5.连续测试的的5个步骤: Devops/5.5steps-of-continuous-testing
      - 6.有趣的devops: Devops/6.interesting-devops
    - Devops工具:  
      - Gitlab-CI/CD:
        - 0.Gitlab-ce安装: GitLab-CICD/0.Gitlab-ce-install  
        - 1.Gitlab-Runner安装: GitLab-CICD/1.Gitlab-RunnerIinstall
        - 2.Gitlab-ci.yaml文件基础配置: GitLab-CICD/2.gitlab-ci.yamlFileConfigure   
        - 3.Gitlab-Runner持续集成和自动更新: GitLab-CICD/3.gitlab+runnerCI-autoUpdate
        - 4.Gitlab-ci-soner: GitLab-CICD/4.gitlab-ci+soner   
        - 5.Gitlab-ci SAST静态应用安全测试: GitLab-CICD/5.SAST
        - 6.Gitlab-ci Dependency依赖关系扫描: GitLab-CICD/6.Dependency
        - 7.Gitlab-ci license_management依赖关系许可: GitLab-CICD/7.license_management
        - 8.Gitlab-ci sitespeed.io Web性能: GitLab-CICD/8.sitespeed.io    
        - 9.Gitlab-ci DAST ZAP安全分析: GitLab-CICD/9.DAST
        - 10.配置邮件通知: GitLab-CICD/10.configure-email  
        - 11.YAML与拓扑: GitLab-CICD/11.YAML-And-tuop
        - 12.Gitlab完成一次Docker构建: GitLab-CICD/12.gitlab+docker  
        - 13.Gitlab-ci Docker镜像层质量检测: GitLab-CICD/13.gitlab-ci-dockerImageCheck
        - 14.Gitlab-ci Docker镜像层安全检测: GitLab-CICD/14.gitlab-ci-docker-bench-security
        - 15.Gitlab-ci Docker镜像层质量分析: GitLab-CICD/15.gitlab-ci-dive
        - 16.gitlab https配置: GitLab-CICD/16.gitlab-https
        - 17.gitlab的Prometheus监控: GitLab-CICD/17.gitlabPrometheusMon
        - 18.基于gitlab-ci的定时任务: GitLab-CICD/18.gitlab-ciCrontabJob       
      - Jenkins:
        - Jenkins:
          - 1.jenkins忘记密码: Jenkins/1.jenkins
          - 2.基于用户角色的权限控制: Jenkins/2.jenkins-User-based-AccessControl
          - 3.jenkins设置环境变量的几种方式: Jenkins/3.jenkinsEnv
          - 4.单机运行多个jenkins-docker: Jenkins/4.Running-multiple-jenkins
          - 5.git+jenkins发布和回滚示例: Jenkins/5.git+jenkinsdeploy-and-rollback-examples
          - 6.jenkins+gitlab+docker快速部署发布回滚示例: Jenkins/6.jenkins+gitlab+docker-deploy-and-rollback-examples
        - Pipeline:
          - A.jenkins+pipeline+gitlab+ansible安装配置(1): Jenkins/A.jenkins+pipeline+gitlab+ansibleIinstallConfigure(1)
          - B.jenkins pipeline简单使用示例(2): Jenkins/B.jenkins pipelineUseExample(2)
          - C.jenkins pipeline参数化构建发布和回滚(3): Jenkins/C.jenkins pipeline-Parametric-build-deploy-rollback(3)
          - D.jenkins集成SonarQube Scanner(4): Jenkins/D.jenkins-SonarQube Scanner(4)
          - E.jenkins pipeline邮件提醒的两种方式(5): Jenkins/E.jenkins-pipelineEmail(5)
          - F.jenkins pipeline阶段终止: Jenkins/F.jenkins-pipelineStae-Stop
  - Git操作手册:
    - Git稀疏检出: Git/GitCheckOut  
    
theme:
  name: mkdocs
  highlightjs: true
  hljs_languages:
      - yaml
      - go
      - shell
extra:
  history_buttons: false
  #version: v1.0.2  
  version: www.linuxea.com
markdown_extensions:
  - toc:
      permalink: '#'  
copyright: Copyright &copy; 2019 <a href="https://github.com/marksugar">Mark</a>, Maintained by the <a href="/about/release-notes/#maintenance-team">Mark Team</a>.
google_analytics: ['UA-27795084-5', 'mkdocs.org']

plugins:
    - search